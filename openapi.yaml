openapi: 3.0.0
info:
  title: Planter API
  description: API for the Planter application
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User operations
  - name: Plants
    description: Plant operations
  - name: Shops
    description: Shop operations
  - name: Recommendations
    description: Plant recommendation operations
  - name: Chat
    description: Plant chat operations
  - name: Admin
    description: Administrative operations
  - name: Notifications
    description: Notification operations

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user
      description: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update user
      description: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plants:
    get:
      tags:
        - Plants
      summary: Get all plants
      description: Get all plants
      responses:
        '200':
          description: Plants found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'

  /plants/{plantId}:
    get:
      tags:
        - Plants
      summary: Get plant
      description: Get a plant by ID
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Plant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plants/search:
    get:
      tags:
        - Plants
      summary: Search plants
      description: Search for plants by query
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plants found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/favorites:
    get:
      tags:
        - Users
      summary: Get favorite plants
      description: Get a user's favorite plants
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plants found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plants/{plantId}/favorite:
    post:
      tags:
        - Plants
      summary: Add to favorites
      description: Add a plant to a user's favorites
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Added to favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Plants
      summary: Remove from favorites
      description: Remove a plant from a user's favorites
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Removed from favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plants/{plantId}/water:
    post:
      tags:
        - Plants
      summary: Mark as watered
      description: Mark a plant as watered
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Marked as watered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plants/user:
    get:
      tags:
        - Plants
      summary: Get user plants
      description: Get all plants owned by a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plants found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plants/user/{plantId}:
    post:
      tags:
        - Plants
      summary: Add user plant
      description: Add a plant to a user's collection
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
              required:
                - location
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plant added to collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Plants
      summary: Update user plant
      description: Update a user's plant
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
              required:
                - location
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plant updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Plants
      summary: Remove user plant
      description: Remove a plant from a user's collection
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plant removed from collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shops:
    get:
      tags:
        - Shops
      summary: Get all shops
      description: Get all shops
      responses:
        '200':
          description: Shops found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shop'

  /shops/{shopId}:
    get:
      tags:
        - Shops
      summary: Get shop
      description: Get a shop by ID
      parameters:
        - name: shopId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Shop found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shops/{shopId}/plants:
    get:
      tags:
        - Shops
      summary: Get shop plants
      description: Get all plants from a shop
      parameters:
        - name: shopId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Plants found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recommendations/questionnaire:
    post:
      tags:
        - Recommendations
      summary: Save questionnaire
      description: Save a plant questionnaire
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionnaireRequest'
      responses:
        '201':
          description: Best matching plant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /recommendations/questionnaire/detailed:
    post:
      tags:
        - Recommendations
      summary: Save detailed questionnaire
      description: Save a detailed plant questionnaire with more specific preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedQuestionnaireRequest'
      responses:
        '201':
          description: Best matching plant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recommendations/questionnaire/{questionnaireId}:
    get:
      tags:
        - Recommendations
      summary: Get recommendations
      description: Get plant recommendations based on a questionnaire
      parameters:
        - name: questionnaireId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Recommendations found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '404':
          description: Questionnaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /chat/sessions:
    post:
      tags:
        - Chat
      summary: Create chat session
      description: Create a new chat session for plant-related conversations
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Chat session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Chat
      summary: Get chat sessions
      description: Get all chat sessions for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Chat sessions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /chat/sessions/{sessionId}:
    get:
      tags:
        - Chat
      summary: Get chat session
      description: Get a chat session by ID
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Chat session found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Chat session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /chat/sessions/{sessionId}/messages:
    get:
      tags:
        - Chat
      summary: Get chat messages
      description: Get all messages for a chat session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Chat messages found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Chat session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Chat
      summary: Send chat message
      description: Send a message to the chat and get a response
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Chat session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /admin/plants:
    post:
      tags:
        - Admin
      summary: Create plant
      description: Create a new plant (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminPlantRequest'
      responses:
        '201':
          description: Plant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      description: Get all notifications for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/{notificationId}/read:
    post:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Mark a notification as read
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        profileImageUrl:
          type: string
          nullable: true
        locations:
          type: array
          items:
            type: string
        favoritePlantIds:
          type: array
          items:
            type: string
            format: uuid
        ownedPlantIds:
          type: array
          items:
            type: string
            format: uuid
        language:
          type: string
          enum:
            - RUSSIAN
            - ENGLISH
        notificationsEnabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CareInstructions:
      type: object
      properties:
        wateringFrequency:
          type: integer
          description: Watering frequency in days
        sunlight:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        temperature:
          type: object
          properties:
            min:
              type: integer
            max:
              type: integer
        humidity:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        soilType:
          type: string
        fertilizerFrequency:
          type: integer
          description: Fertilizer frequency in days
        additionalNotes:
          type: string

    Plant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        scientificName:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        careInstructions:
          $ref: '#/components/schemas/CareInstructions'
        price:
          type: number
          nullable: true
        shopId:
          type: string
          format: uuid
          nullable: true
        isFavorite:
          type: boolean
        location:
          type: string
          nullable: true
        lastWatered:
          type: string
          format: date-time
          nullable: true
        nextWatering:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Shop:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        rating:
          type: number
          format: float
        imageUrl:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuestionnaireRequest:
      type: object
      properties:
        sunlightPreference:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        petFriendly:
          type: boolean
        careLevel:
          type: integer
          minimum: 1
          maximum: 5
        preferredLocation:
          type: string
          nullable: true
        additionalPreferences:
          type: string
          nullable: true
      required:
        - sunlightPreference
        - petFriendly
        - careLevel

    PlantQuestionnaire:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
          nullable: true
        sunlightPreference:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        petFriendly:
          type: boolean
        careLevel:
          type: integer
          minimum: 1
          maximum: 5
        preferredLocation:
          type: string
          nullable: true
        additionalPreferences:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    DetailedQuestionnaireRequest:
      type: object
      properties:
        sunlightPreference:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        petFriendly:
          type: boolean
        careLevel:
          type: integer
          minimum: 1
          maximum: 5
        preferredLocation:
          type: string
          nullable: true
        hasChildren:
          type: boolean
        plantSize:
          type: string
          enum:
            - SMALL
            - MEDIUM
            - LARGE
        floweringPreference:
          type: boolean
        airPurifying:
          type: boolean
        wateringFrequency:
          type: string
          enum:
            - RARE
            - REGULAR
            - FREQUENT
        experienceLevel:
          type: string
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        additionalPreferences:
          type: string
          nullable: true
      required:
        - sunlightPreference
        - petFriendly
        - careLevel
        - plantSize
        - wateringFrequency
        - experienceLevel
        
    ChatSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastUsed:
          type: string
          format: date-time
          
    ChatMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - user
            - assistant
        content:
          type: string
        createdAt:
          type: string
          format: date-time
          
    ChatRequest:
      type: object
      properties:
        message:
          type: string
      required:
        - message
        
    ChatResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ChatMessage'
          
    AdminPlantRequest:
      type: object
      properties:
        name:
          type: string
        scientificName:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        price:
          type: number
          format: float
          nullable: true
        shopId:
          type: string
          nullable: true
        careInstructions:
          type: object
          properties:
            wateringFrequency:
              type: integer
              description: Watering frequency in days
            sunlight:
              type: string
              enum:
                - LOW
                - MEDIUM
                - HIGH
            temperature:
              type: object
              properties:
                min:
                  type: integer
                max:
                  type: integer
            humidity:
              type: string
              enum:
                - LOW
                - MEDIUM
                - HIGH
            soilType:
              type: string
            fertilizerFrequency:
              type: integer
              description: Fertilizer frequency in days
            additionalNotes:
              type: string
      required:
        - name
        - scientificName
        - description
        - imageUrl
        - careInstructions
        
    Error:
      type: object
      properties:
        error:
          type: string

    NotificationResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        total:
          type: integer
          description: Total number of notifications

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        plantId:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - WATERING
        message:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        plant:
          $ref: '#/components/schemas/Plant'